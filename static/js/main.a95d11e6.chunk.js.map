{"version":3,"sources":["components/StyledComponents/Flex.jsx","components/StyledComponents/Button.jsx","toolKitRedux/toolkitSlice.js","components/Homepage/Homepage.jsx","components/Reports/slots.js","components/Reports/SaturationReport/OnionSaturationCard.jsx","components/StyledComponents/Title.jsx","components/StyledComponents/Select.js","axios/axios.js","toolKitRedux/saturationPeriodReportSlice.js","components/Reports/SaturationReport/SaturationByPeriodPage.jsx","components/StyledComponents/StyledLink.jsx","components/Reports/SaturationReport/SaturationByOnionsPage.jsx","components/Reports/Reports.jsx","components/WeatherControlPage/WeatherControlPage.jsx","components/StyledComponents/TextContent.jsx","components/Page404/Page404.jsx","components/Reports/Charts/ChartOfBigOnions.jsx","components/Reports/Charts/ChartOfSmallOnions.jsx","components/Reports/Charts/ChartsPage.jsx","components/Navbar/Navbar.jsx","App.jsx","toolKitRedux/store.js","index.js"],"names":["StyledFlex","styled","div","props","direction","align","justify","margin","width","height","padding","bColor","tDecoration","bBorder","border","bRadius","Flex","StyledButton","button","bcolor","color","bradius","Button","type","toolkitSlice","createSlice","name","initialState","count","todos","reducers","increment","state","decrement","addTodo","action","push","payload","removeLastTodo","pop","actions","Homepage","dispatch","useDispatch","useSelector","toolkit","onClick","prompt","a","setTimeout","map","todo","slotsRegular","OnionSaturationCard","city","saturation","saturationAtSlotData","id","difference","reason_saturation","slotFilledStr","area","level_sat","StyledTitle","span","decoration","fSize","fWeight","textAlign","cursor","display","Title","SelectStyle","background","borderRadius","appearance","outline","aideApiAxios","axios","create","baseURL","headers","Authorization","axiosGetSaturatedOnionsByPeriod","createAsyncThunk","periodStart","periodEnd","rejectWithValue","get","saturatedOnions","console","log","statusText","Error","data","message","axiosGetSaturatedOnionAnalyseObject","onionCode","saturatedOnionData","JSON","parse","onionReportObject","charAt","getSaturationReport","getState","clearReport","getUniqueSaturatedOnionCodes","saturationPeriodReport","saturatedUniqueSortedOnionCodesArray","forEach","kyiv_report","setError","status","error","setLoading","saturationPeriodReportSlice","mio_report","small_report","saturatedOnionsObjectsArray","periodReport","setPeriodOfReport","allSaturatedOnionCodes","reduce","accum","onion","some","obj","uniqueOnionCodes","filter","index","indexOf","sort","addOnionObjToPeriodReport","extraReducers","fulfilled","rejected","isKyiv","isMio","pending","React","memo","saturationReport","useState","sendRequestForReport","setSendRequestForReport","selectChangeHandler","e","target","value","substr","useEffect","getReport","style","onChange","slot","preventDefault","onionReport","key","prevProps","nextProps","SNavLink","NavLink","text_align","background_color","radius","StyledNavLink","to","text","SaturationByOnionsPage","startPeriodSlotSelected","setStartPeriodSlotSelected","endPeriodSlotSelected","setEndPeriodSlotSelected","level_saturation","setSaturationPeriodReport","getSaturatedOnionsByPeriod","response","getOnionSaturationReportObject","onionName","slotStart","slotEnd","getSatReport","slotStartHour","slotEndHour","saturatedOnionsFilteredBySlotsPeriod","allCodesOfSaturatedOnionsAtSelectedPeriod","uniqueCodesOfSaturatedOnions","Promise","all","reportArray","report","length","Reports","useRouteMatch","path","url","exact","stylesForStyledLink","component","SaturationByPeriodPage","WeatherControlPage","StyledSpan","TextContent","Page404","ChartOfBigOnions","ChartOfSmallOnions","ChartsPage","Navbar","GlobalStyle","createGlobalStyle","App","persistConfig","storage","rootReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","reducer","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a95d11e6.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledFlex = styled.div`\n    display: flex;\n    flex-direction: ${(props) => props.direction || 'row'};\n    align-items: ${({ align }) => align || 'stretch'};\n    justify-content: ${({ justify }) => justify || 'stretch'};\n    margin: ${({ margin }) => margin || '0'};\n    width: ${({ width }) => width || '100%'};\n    height: ${({ height }) => height || '100%'};\n    padding: ${({ padding }) => padding || '0'};\n    background-color: ${({ bColor }) => bColor || 'transparent'};\n    text-decoration: ${({ tDecoration }) => tDecoration || 'none'};\n    border-bottom: ${({ bBorder }) => bBorder || ''};\n    border: ${({ border }) => border || ''};\n    border-radius: ${({ bRadius }) => bRadius || ''};\n`\n\nexport default function Flex(props) {\n    return <StyledFlex {...props} />\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledButton = styled.button`\n    width: ${({ width }) => width || '100px'};\n    background-color: ${({ bcolor }) => bcolor || 'rgb(0, 0 ,0)'};\n    color: ${({ color }) => color || 'white'};\n    font-weight: 500;\n    padding: ${({ padding }) => padding || '7px'};\n    border-radius: ${({ bradius }) => bradius || '5px'};\n    border: ${({ border }) => border || '2px solid white'};\n    cursor: pointer;\n`\n\nexport default function Button(props) {\n    return <StyledButton type={props.type} {...props} />\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const addAsyncTodo = () => {\n    return async (dispatch) => {\n        setTimeout(() => {\n            dispatch(addTodo('ASYNC TODO'))\n        }, 2000)\n    }\n}\n\nconst toolkitSlice = createSlice({\n    name: 'toolkit',\n    initialState: {\n        count: 21,\n        todos: ['Умыться', 'Покушать', 'Уснуть'],\n    },\n    reducers: {\n        increment(state) {\n            state.count = state.count + 1\n        },\n        decrement(state) {\n            state.count = state.count - 1\n        },\n        addTodo(state, action) {\n            state.todos.push(action.payload)\n        },\n        removeLastTodo(state) {\n            state.todos.pop()\n        },\n    },\n})\n\nexport const { increment, decrement, addTodo, removeLastTodo } =\n    toolkitSlice.actions\nexport default toolkitSlice.reducer\n","import React from 'react'\nimport Flex from '../StyledComponents/Flex'\nimport Button from '../StyledComponents/Button'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    addAsyncTodo,\n    addTodo,\n    decrement,\n    increment,\n    removeLastTodo,\n} from '../../toolKitRedux/toolkitSlice'\n\nconst Homepage = () => {\n    const dispatch = useDispatch()\n    const count = useSelector((state) => state.toolkit.count)\n    const todos = useSelector((state) => state.toolkit.todos)\n\n    return (\n        <Flex>\n            <div>{count}</div>\n            <Button onClick={() => dispatch(increment())}>Инкремент</Button>\n            <Button onClick={() => dispatch(decrement())}>Декремент</Button>\n            <Button onClick={() => dispatch(addTodo(prompt()))}>\n                Добавить туду\n            </Button>\n            <Button onClick={() => dispatch(removeLastTodo())}>\n                Удалить последний туду\n            </Button>\n            <Button onClick={() => dispatch(addAsyncTodo())}>\n                Добавить асинк туду\n            </Button>\n            {todos.map((todo) => (\n                <div>{todo}</div>\n            ))}\n        </Flex>\n    )\n}\n\nexport default Homepage\n","export const slotsRegular = [\n    '00:00',\n    '01:00',\n    '02:00',\n    '03:00',\n    '04:00',\n    '05:00',\n    '06:00',\n    '07:00',\n    '08:00',\n    '09:00',\n    '10:00',\n    '11:00',\n    '12:00',\n    '13:00',\n    '14:00',\n    '15:00',\n    '16:00',\n    '17:00',\n    '18:00',\n    '19:00',\n    '20:00',\n    '21:00',\n    '22:00',\n    '23:00',\n]\n\nexport const slotsFlexible = [\n    '00:00',\n    '00:30',\n    '01:00',\n    '01:30',\n    '02:00',\n    '02:30',\n    '03:00',\n    '03:30',\n    '04:00',\n    '04:30',\n    '05:00',\n    '05:30',\n    '06:00',\n    '06:30',\n    '07:00',\n    '07:30',\n    '08:00',\n    '08:30',\n    '09:00',\n    '09:30',\n    '10:00',\n    '10:30',\n    '11:00',\n    '11:30',\n    '12:00',\n    '12:30',\n    '13:00',\n    '13:30',\n    '14:00',\n    '14:30',\n    '15:00',\n    '15:30',\n    '16:00',\n    '16:30',\n    '17:00',\n    '17:30',\n    '18:00',\n    '18:30',\n    '19:00',\n    '19:30',\n    '20:00',\n    '20:30',\n    '21:00',\n    '21:30',\n    '22:00',\n    '22:30',\n    '23:00',\n    '23:30',\n]\n","import React from 'react'\nimport Flex from '../../StyledComponents/Flex'\n\nconst OnionSaturationCard = (props) => {\n    return (\n        <Flex\n            border={'2px solid white'}\n            bRadius={'15px'}\n            padding={'25px'}\n            margin={'10px'}\n        >\n            <div>\n                <h1>{props.city}</h1>\n                <div>\n                    {props.saturation.map((saturationAtSlotData, id) => (\n                        <div key={id}>{saturationAtSlotData}</div>\n                    ))}\n                </div>\n                <div>{props.difference}</div>\n                <div>{props.reason_saturation}</div>\n                <div>{props.slotFilledStr}</div>\n                <div>\n                    <span>{props.area}</span>\n                    <span>{props.level_sat}</span>\n                </div>\n            </div>\n        </Flex>\n    )\n}\n\nexport default OnionSaturationCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledTitle = styled.span`\n\ttext-align: ${({ align }) => align || 'center'};\n\tmargin: ${({ margin }) => margin || '0'};\n\tcolor: ${({ color }) => color || 'white'};\n\ttext-decoration: ${({ decoration }) => decoration || 'none'};\n\tfont-size: ${({ fSize }) => fSize || '2em'};\n\tfont-weight: ${({ fWeight }) => fWeight || '300'};\n\twidth: ${({ width }) => width || '100%'};\n\theight: ${({ height }) => height || '100%'};\n\tmargin: ${({ margin }) => margin || '0'};\n\ttext-align: ${({ textAlign }) => textAlign || 'start'};\n\tcursor: ${({ cursor }) => cursor || ''};\n\tdisplay: ${({ display }) => display || 'inline'};\n\ttext-decoration: ${({tDecoration}) => tDecoration || 'none'};\n\tbackground-color: ${({bColor}) => bColor || 'transparent'};\n`\n\nexport default function Title(props) {\n\treturn <StyledTitle {...props} />\n}\n","export const SelectStyle = {\n    background: 'none',\n    borderRadius: '10px',\n    color: 'white',\n    padding: '8px',\n    appearance: 'none',\n    width: '3.5rem',\n    border: '3px solid white',\n    outline: 'none',\n    margin: '0 10px'\n}","import axios from 'axios'\nconst ACCESS_TOKEN = '0a4fcce5995c4f7478bd0b891b265a73d0289ba4'\nconst ACCESS_TOKEN2 = 'ace68d53680920b040d5e419b048c4d99be6d65f'\nconst apiURL = 'https://www.aideindustries.tk'\n\nexport const aideApiAxios = axios.create({\n    baseURL: apiURL,\n    headers: {\n        Authorization: `Token ${ACCESS_TOKEN2}`,\n    },\n})\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { aideApiAxios } from '../axios/axios'\n\nexport const axiosGetSaturatedOnionsByPeriod = createAsyncThunk(\n    'saturation-period/axiosGetSaturatedOnionsByPeriod',\n    async function ({ periodStart, periodEnd }, { rejectWithValue }) {\n        try {\n            const saturatedOnions = await aideApiAxios.get(\n                `/data/filter/?sat=low&start=${periodStart}&end=${periodEnd}&today=yes`\n            )\n            console.log({ saturatedOnions })\n            if (saturatedOnions.statusText !== 'OK') {\n                throw new Error('Error братан из сервачка прилетел')\n            }\n            return saturatedOnions.data\n        } catch (error) {\n            return rejectWithValue(error.message)\n        }\n    }\n)\n\nexport const axiosGetSaturatedOnionAnalyseObject = createAsyncThunk(\n    'saturation-period/axiosGetSaturatedOnionObject',\n    async function (\n        { onionCode, periodStart, periodEnd },\n        { rejectWithValue, dispatch }\n    ) {\n        try {\n            const saturatedOnionData = await aideApiAxios.get(\n                `/analysis/${onionCode}/${periodStart}/${periodEnd}`\n            )\n\n            if (saturatedOnionData.statusText !== 'OK') {\n                throw new Error('Error братан из сервачка прилетел')\n            }\n            const onionReportObject = await JSON.parse(saturatedOnionData.data)\n            if (onionReportObject.difference.charAt(19) === '+') {\n                onionReportObject['slotFilledStr'] =\n                    'Заранее расширяли слоты - постепенно заполнялись.'\n            } else if (onionReportObject.difference.charAt(19) === '-') {\n                onionReportObject['slotFilledStr'] =\n                    'Заранее расширяли слоты - слабо заполнялись.'\n            }\n            return onionReportObject\n        } catch (error) {\n            return rejectWithValue(error.message)\n        }\n    }\n)\n\nexport const getSaturationReport = createAsyncThunk(\n    'saturation-period/getSaturationReport',\n    async function ({ periodStart, periodEnd }, { dispatch, getState }) {\n        await dispatch(clearReport())\n        await dispatch(\n            axiosGetSaturatedOnionsByPeriod({ periodStart, periodEnd })\n        )\n        await dispatch(getUniqueSaturatedOnionCodes())\n\n        const saturatedUniqueSortedOnionCodesArray =\n            getState().saturationPeriodReport\n                .saturatedUniqueSortedOnionCodesArray\n        saturatedUniqueSortedOnionCodesArray.forEach((onionCode) => {\n            return dispatch(\n                axiosGetSaturatedOnionAnalyseObject({\n                    onionCode,\n                    periodStart,\n                    periodEnd,\n                })\n            )\n        })\n        console.log(getState())\n        const reportArray = [...getState().saturationPeriodReport.kyiv_report]\n    }\n)\n// Helper for handling errors from rejectWithValue\nconst setError = (state, action) => {\n    state.status = 'rejected'\n    state.error = action.payload\n}\n\nconst setLoading = (state) => {\n    state.status = 'loading'\n    state.error = null\n}\n\nconst saturationPeriodReportSlice = createSlice({\n    name: 'saturation-period',\n    initialState: {\n        status: null,\n        error: null,\n        periodStart: '16',\n        periodEnd: '18',\n        kyiv_report: [],\n        mio_report: [],\n        small_report: [],\n        saturatedOnionsObjectsArray: [],\n        saturatedUniqueSortedOnionCodesArray: [],\n        periodReport: [],\n    },\n    reducers: {\n        setPeriodOfReport(state, action) {\n            state.periodStart = action.payload.periodStart\n            state.periodEnd = action.payload.periodEnd\n        },\n        // Получаем уникальные имена онионов в которых была сатурация за выбраный период\n        getUniqueSaturatedOnionCodes(state) {\n            const allSaturatedOnionCodes =\n                state.saturatedOnionsObjectsArray.reduce((accum, onion) => {\n                    if (!accum.some((obj) => obj.city === onion.city)) {\n                        accum.push(onion.city)\n                    }\n                    return accum\n                }, [])\n            const uniqueOnionCodes = allSaturatedOnionCodes.filter(\n                (onionCode, index) =>\n                    allSaturatedOnionCodes.indexOf(onionCode) === index\n            )\n            state.saturatedUniqueSortedOnionCodesArray = uniqueOnionCodes.sort()\n            console.log(state.saturatedUniqueSortedOnionCodesArray)\n            state.status = 'loading'\n        },\n        addOnionObjToPeriodReport(state, action) {\n            state.periodReport.push(action.payload)\n        },\n        clearReport(state) {\n            state.kyiv_report = state.mio_report = state.small_report = []\n        },\n    },\n    extraReducers: {\n        [axiosGetSaturatedOnionsByPeriod.fulfilled]: (state, action) => {\n            state.saturatedOnionsObjectsArray = action.payload\n        },\n        [axiosGetSaturatedOnionsByPeriod.rejected]: setError,\n        [axiosGetSaturatedOnionAnalyseObject.fulfilled]: (state, action) => {\n            // Сортируем обьекты репортов по соответствующих массивах\n            const isKyiv =\n                action.payload.city === 'KIE' || action.payload.city === 'KYI'\n            const isMio =\n                action.payload.city === 'DNP' ||\n                action.payload.city === 'KHA' ||\n                action.payload.city === 'LVI' ||\n                action.payload.city === 'ODS'\n            if (isKyiv) {\n                state.kyiv_report.push(action.payload)\n            } else if (isMio) {\n                state.mio_report.push(action.payload)\n            } else {\n                state.small_report.push(action.payload)\n            }\n        },\n        [axiosGetSaturatedOnionAnalyseObject.pending]: setLoading,\n        [axiosGetSaturatedOnionAnalyseObject.rejected]: setError,\n        [getSaturationReport.fulfilled]: (state, action) => {\n            state.periodReport = [\n                ...state.kyiv_report,\n                ...state.mio_report,\n                ...state.small_report,\n            ]\n            state.status = 'resolved'\n        },\n        [getSaturationReport.pending]: setLoading,\n    },\n})\n\nexport const { setPeriodOfReport, getUniqueSaturatedOnionCodes, clearReport } =\n    saturationPeriodReportSlice.actions\n\nexport default saturationPeriodReportSlice.reducer\n","import React, { useEffect, useState } from 'react'\nimport { slotsRegular } from '../slots'\nimport OnionSaturationCard from './OnionSaturationCard'\nimport Flex from '../../StyledComponents/Flex'\nimport Title from '../../StyledComponents/Title'\nimport Button from '../../StyledComponents/Button'\nimport { SelectStyle } from '../../StyledComponents/Select'\nimport {\n    getSaturationReport,\n    setPeriodOfReport,\n} from '../../../toolKitRedux/saturationPeriodReportSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { log10 } from 'chart.js/helpers'\n\nexport default React.memo(\n    function SaturationByPeriodPage() {\n        const dispatch = useDispatch()\n        const {\n            status,\n            error,\n            periodStart,\n            periodEnd,\n            periodReport,\n            kyiv_report,\n            mio_report,\n            small_report,\n        } = useSelector((state) => state.saturationPeriodReport)\n\n        const saturationReport = [\n            ...kyiv_report,\n            ...mio_report,\n            ...small_report,\n        ]\n        const [sendRequestForReport, setSendRequestForReport] = useState(false)\n\n        function selectChangeHandler(e) {\n            const name = e.target.name\n            if (name === 'slotStartPeriodSelector') {\n                dispatch(\n                    setPeriodOfReport({\n                        periodStart: e.target.value.substr(0, 2),\n                        periodEnd: periodEnd,\n                    })\n                )\n            } else if (name === 'slotEndPeriodSelector') {\n                dispatch(\n                    setPeriodOfReport({\n                        periodStart: periodStart,\n                        periodEnd: e.target.value.substr(0, 2),\n                    })\n                )\n            }\n        }\n\n        useEffect(() => {\n            async function getReport() {\n                dispatch(\n                    getSaturationReport({\n                        periodStart: periodStart,\n                        periodEnd: periodEnd,\n                    })\n                )\n            }\n            getReport()\n        }, [sendRequestForReport])\n        // console.log({ periodReport })\n        return (\n            <Flex direction={'column'} align={'center'} margin={'4em 0 0 0'}>\n                <Flex justify={'center'}>\n                    <form action=\"#\">\n                        <select\n                            style={SelectStyle}\n                            name=\"slotStartPeriodSelector\"\n                            id=\"1\"\n                            value={`${periodStart}:00`}\n                            onChange={(e) => selectChangeHandler(e)}\n                        >\n                            {slotsRegular.map((slot, id) => (\n                                <option value={slot} key={id}>\n                                    {slot}\n                                </option>\n                            ))}\n                        </select>\n                        <select\n                            style={SelectStyle}\n                            name=\"slotEndPeriodSelector\"\n                            id=\"2\"\n                            value={`${periodEnd}:00`}\n                            onChange={(e) => selectChangeHandler(e)}\n                        >\n                            {slotsRegular.map((slot, id) => (\n                                <option value={slot} key={id}>\n                                    {slot}\n                                </option>\n                            ))}\n                        </select>\n                        <Button\n                            onClick={(e) => {\n                                e.preventDefault()\n                                setSendRequestForReport(!sendRequestForReport)\n                            }}\n                            bcolor={'black'}\n                            color={'white'}\n                            bradius={'10px'}\n                            border={'3px solid white'}\n                        >\n                            Get report by period\n                        </Button>\n                    </form>\n                </Flex>\n                <Flex direction={'column'} width={'50%'}>\n                    <Title\n                        fWeight={'800'}\n                    >{`Апдейт по сатурации с ${periodStart}:00 по ${periodEnd}:00`}</Title>\n                    <div>\n                        {saturationReport.map((onionReport, id) => {\n                            // console.log(onionReport)\n                            return (\n                                <OnionSaturationCard\n                                    {...onionReport}\n                                    key={id}\n                                />\n                            )\n                        })}\n                    </div>\n                    {/*<div>*/}\n                    {/*    {status === 'resolved' &&*/}\n                    {/*        saturationReport.map((reportArray) => {*/}\n                    {/*            // reportArray.sort((a, b) => a.city)*/}\n                    {/*            console.log(reportArray)*/}\n\n                    {/*            return reportArray.map((onionReport, id) => {*/}\n                    {/*                // console.log(onionReport)*/}\n                    {/*                return (*/}\n                    {/*                    <OnionSaturationCard*/}\n                    {/*                        {...onionReport}*/}\n                    {/*                        key={id}*/}\n                    {/*                    />*/}\n                    {/*                )*/}\n                    {/*            })*/}\n                    {/*        })}*/}\n                    {/*</div>*/}\n                    {/*<div>*/}\n                    {/*    {saturationReport.kyiv_report.map((reportObj, id) => (*/}\n                    {/*        <OnionSaturationCard {...reportObj} key={id} />*/}\n                    {/*    ))}*/}\n                    {/*    {saturationReport.mio_report.map((reportObj, id) => (*/}\n                    {/*        <OnionSaturationCard {...reportObj} key={id} />*/}\n                    {/*    ))}*/}\n                    {/*    {saturationReport.small_report.map((reportObj, id) => (*/}\n                    {/*        <OnionSaturationCard {...reportObj} key={id} />*/}\n                    {/*    ))}*/}\n                    {/*</div>*/}\n                </Flex>\n                {status === 'loading' && <h2>Loading...</h2>}\n                {error && <h2>An error occurred: {error}</h2>}\n            </Flex>\n        )\n    },\n    (prevProps, nextProps) => {\n        if (prevProps !== nextProps) {\n            return true\n        } else {\n            return false\n        }\n    }\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { NavLink } from 'react-router-dom'\n\nconst SNavLink = styled(NavLink)`\n    color: ${({ color }) => color || 'white'};\n    text-decoration: ${({ decoration }) => decoration || 'none'};\n    font-size: ${({ fSize }) => fSize || '1em'};\n    width: ${({ width }) => width || '100%'};\n    height: ${({ height }) => height || '100%'};\n    padding: ${({ padding }) => padding || '0'};\n    margin: ${({ margin }) => margin || '0'};\n    text-align: ${({ text_align }) => text_align || 'start'};\n    cursor: ${({ cursor }) => cursor || ''};\n    display: ${({ display }) => display || 'inline'};\n    text-decoration: ${({ tDecoration }) => tDecoration || 'none'};\n    background-color: ${({ background_color }) => background_color || 'violet'};\n    border-radius: ${({ radius }) => radius || '0px'};\n    border: ${({ border }) => border || ''};\n    &.active {\n        background-color: blueviolet;\n    }\n`\n\nconst StyledNavLink = (props) => {\n    return (\n        <SNavLink to={props.to} {...props}>\n            {props.text}\n        </SNavLink>\n    )\n}\n\nexport default StyledNavLink\n","import React, { useEffect, useState } from 'react'\nimport { aideApiAxios } from '../../../axios/axios'\nimport Flex from '../../StyledComponents/Flex'\nimport { SelectStyle } from '../../StyledComponents/Select'\nimport { slotsRegular } from '../slots'\nimport Button from '../../StyledComponents/Button'\nimport Title from '../../StyledComponents/Title'\nimport OnionSaturationCard from './OnionSaturationCard'\n\nconst SaturationByOnionsPage = () => {\n    const stateReport = [\n        {\n            city: '',\n            difference: '',\n            reason_saturation: '',\n            area: '',\n            saturation: [''],\n            level_saturation: ' ',\n        },\n    ]\n\n    const [startPeriodSlotSelected, setStartPeriodSlotSelected] =\n        useState('16:00')\n    const [endPeriodSlotSelected, setEndPeriodSlotSelected] = useState('17:00')\n    const [saturationPeriodReport, setSaturationPeriodReport] =\n        useState(stateReport)\n    const [sendRequestForReport, setSendRequestForReport] = useState(false)\n\n    function selectChangeHandler(e) {\n        const name = e.target.name\n        if (name === 'slotStartPeriodSelector') {\n            setStartPeriodSlotSelected(e.target.value)\n        } else if (name === 'slotEndPeriodSelector') {\n            setEndPeriodSlotSelected(e.target.value)\n        }\n    }\n\n    async function getSaturatedOnionsByPeriod(periodStart, periodEnd) {\n        try {\n            const response = await aideApiAxios.get(\n                `/data/filter/?sat=low&start=${periodStart}&end=${periodEnd}&today=yes`\n            )\n            return response.data\n        } catch (error) {\n            console.log('Error блин :', error)\n            return error\n        }\n    }\n\n    async function getOnionSaturationReportObject(\n        onionName,\n        slotStart,\n        slotEnd\n    ) {\n        try {\n            const response = await aideApiAxios.get(\n                `/analysis/${onionName}/${slotStart}/${slotEnd}`\n            )\n            // console.log(JSON.parse(response.data))\n            return await JSON.parse(response.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    async function getSatReport(slotStart, slotEnd) {\n        const slotStartHour = slotStart.substr(0, 2)\n        const slotEndHour = slotEnd.substr(0, 2)\n\n        const saturatedOnionsFilteredBySlotsPeriod =\n            await getSaturatedOnionsByPeriod(slotStartHour, slotEndHour)\n\n        console.log(saturatedOnionsFilteredBySlotsPeriod)\n        const allCodesOfSaturatedOnionsAtSelectedPeriod =\n            saturatedOnionsFilteredBySlotsPeriod.reduce((accum, onion) => {\n                if (!accum.some((obj) => obj.city === onion.city)) {\n                    accum.push(onion.city)\n                }\n                return accum\n            }, [])\n\n        const uniqueCodesOfSaturatedOnions =\n            await allCodesOfSaturatedOnionsAtSelectedPeriod.filter(\n                (onionCode, index) =>\n                    allCodesOfSaturatedOnionsAtSelectedPeriod.indexOf(\n                        onionCode\n                    ) === index\n            )\n\n        const reportArray = await Promise.all(\n            uniqueCodesOfSaturatedOnions.map(async (name) => {\n                return await getOnionSaturationReportObject(\n                    name,\n                    slotStartHour,\n                    slotEndHour\n                )\n            }, [])\n        )\n        return reportArray\n    }\n\n    useEffect(async () => {\n        const report = await getSatReport(\n            startPeriodSlotSelected,\n            endPeriodSlotSelected\n        )\n        if (report.length > 0) {\n            setSaturationPeriodReport(report)\n        }\n    }, [sendRequestForReport])\n\n    return (\n        <Flex direction={'column'} align={'center'} margin={'4em 0 0 0'}>\n            <Flex justify={'center'}>\n                <form action=\"#\">\n                    <select\n                        style={SelectStyle}\n                        name=\"slotStartPeriodSelector\"\n                        id=\"1\"\n                        value={startPeriodSlotSelected}\n                        onChange={(e) => selectChangeHandler(e)}\n                    >\n                        {slotsRegular.map((slot, id) => (\n                            <option value={slot} key={id}>\n                                {slot}\n                            </option>\n                        ))}\n                    </select>\n                    <select\n                        style={SelectStyle}\n                        name=\"slotEndPeriodSelector\"\n                        id=\"2\"\n                        value={endPeriodSlotSelected}\n                        onChange={(e) => selectChangeHandler(e)}\n                    >\n                        {slotsRegular.map((slot, id) => (\n                            <option value={slot} key={id}>\n                                {slot}\n                            </option>\n                        ))}\n                    </select>\n                    <Button\n                        onClick={(e) => {\n                            e.preventDefault()\n                            setSendRequestForReport(!sendRequestForReport)\n                        }}\n                        bcolor={'black'}\n                        color={'white'}\n                        bradius={'10px'}\n                        border={'3px solid white'}\n                    >\n                        Get report\n                    </Button>\n                </form>\n            </Flex>\n            <Flex direction={'column'} width={'50%'}>\n                <Title\n                    fWeight={'800'}\n                >{`Апдейт по сатурации с ${startPeriodSlotSelected} по ${endPeriodSlotSelected}`}</Title>\n                <div>\n                    {saturationPeriodReport.length > 0 ? (\n                        saturationPeriodReport.map((onion, id) => {\n                            if (onion) {\n                                return (\n                                    <OnionSaturationCard {...onion} key={id} />\n                                )\n                            }\n                        })\n                    ) : (\n                        <Title>\n                            {' '}\n                            🦾 Онионов с сатурацией с {\n                                startPeriodSlotSelected\n                            }{' '}\n                            по {endPeriodSlotSelected} не было 🦾\n                        </Title>\n                    )}\n                </div>\n            </Flex>\n        </Flex>\n    )\n}\n\nexport default SaturationByOnionsPage\n","import React from 'react'\nimport SaturationByPeriodPage from './SaturationReport/SaturationByPeriodPage'\nimport { Route, Switch, useRouteMatch } from 'react-router-dom'\nimport StyledNavLink from '../StyledComponents/StyledLink'\nimport Flex from '../StyledComponents/Flex'\nimport { stylesForStyledLink } from '../Navbar/Navbar'\nimport SaturationByOnionsPage from './SaturationReport/SaturationByOnionsPage'\n\nconst Reports = () => {\n    const { path, url } = useRouteMatch()\n\n    return (\n        <Flex>\n            <StyledNavLink\n                exact\n                to={`${url}`}\n                {...stylesForStyledLink}\n                text={'Onions'}\n            />\n            <StyledNavLink\n                to={`${url}/period`}\n                {...stylesForStyledLink}\n                text={'Period'}\n            />\n\n            <Route exact path={`${path}`} component={SaturationByOnionsPage} />\n            <Route path={`${path}/period`} component={SaturationByPeriodPage} />\n        </Flex>\n    )\n}\n\nexport default Reports\n","import React from 'react';\n\nconst WeatherControlPage = () => {\n    return (\n        <div>\n            Camcorders with weather at onions\n        </div>\n    );\n};\n\nexport default WeatherControlPage;","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledSpan = styled.span`\n\tcolor: ${({ color }) => color || 'white'};\n\ttext-decoration: ${({ decoration }) => decoration || 'none'};\n\tfont-size: ${({ fSize }) => fSize || '1em'};\n\tfont-weight: ${({ fWeight }) => fWeight || '300'};\n\twidth: ${({ width }) => width || '100%'};\n\theight: ${({ height }) => height || '100%'};\n\tmargin: ${({ margin }) => margin || '0'};\n\ttext-align: ${({ textAlign }) => textAlign || 'start'};\n\tcursor: ${({ cursor }) => cursor || ''};\n\tdisplay: ${({ display }) => display || 'inline'};\n\ttext-decoration: ${({tDecoration}) => tDecoration || 'none'};\n\tbackground-color: ${({bColor}) => bColor || 'transparent'};\n`\n\nexport default function TextContent(props) {\n\treturn <StyledSpan {...props} />\n}\n","import React from 'react'\nimport Flex from '../StyledComponents/Flex'\nimport TextContent from '../StyledComponents/TextContent'\n\nexport default function Page404() {\n    return (\n        <Flex margin=\"auto\" justify=\"center\" align=\"center\">\n            <TextContent textAlign='center' margin='20% auto' fSize=\"4em\">😞 😞 😞 404: Page not found 😞😞😞</TextContent>\n        </Flex>\n    )\n}\n","import React from 'react';\n\nconst ChartOfBigOnions = () => {\n    return (\n        <div>\n            Big onions chart\n        </div>\n    );\n};\n\nexport default ChartOfBigOnions;","import React from 'react';\n\nconst ChartOfSmallOnions = () => {\n    return (\n        <div>\n            Samll onion chart\n        </div>\n    );\n};\n\nexport default ChartOfSmallOnions;","import React from 'react';\nimport ChartOfBigOnions from \"./ChartOfBigOnions\";\nimport ChartOfSmallOnions from \"./ChartOfSmallOnions\";\n\nconst ChartsPage = () => {\n    return (\n        <div>\n            Charts page\n            <ChartOfBigOnions />\n            <ChartOfSmallOnions/>\n        </div>\n    );\n};\n\nexport default ChartsPage;","import React from 'react'\nimport Flex from '../StyledComponents/Flex'\nimport { Route, Switch, useRouteMatch } from 'react-router-dom'\nimport Homepage from '../Homepage/Homepage'\nimport Reports from '../Reports/Reports'\nimport WeatherControlPage from '../WeatherControlPage/WeatherControlPage'\nimport Page404 from '../Page404/Page404'\nimport StyledNavLink from '../StyledComponents/StyledLink'\nimport ChartsPage from '../Reports/Charts/ChartsPage'\n\nexport const stylesForStyledLink = {\n    width: '10%',\n    padding: '9px',\n    radius: '15px',\n    background_color: 'rgb(93,68,165)',\n    border: '3px solid white',\n    text_align: 'center',\n}\n\nconst Navbar = () => {\n    const { path, url } = useRouteMatch()\n\n    return (\n        <Flex direction={'column'}>\n            <Flex\n                height={'30%'}\n                bColor={'rgb(61,45,108)'}\n                padding={'7px 0px'}\n                justify={'space-evenly'}\n                bBorder={'3px dashed white'}\n            >\n                <StyledNavLink\n                    exact\n                    {...stylesForStyledLink}\n                    to={'/Aide/'}\n                    text={'Home'}\n                />\n                <StyledNavLink\n                    {...stylesForStyledLink}\n                    to={'/Aide/charts'}\n                    text={'Charts'}\n                />\n                <StyledNavLink\n                    {...stylesForStyledLink}\n                    to={'/Aide/reports'}\n                    text={'Reports'}\n                />\n                <StyledNavLink\n                    {...stylesForStyledLink}\n                    to={'/Aide/weather'}\n                    text={'Weather'}\n                />\n            </Flex>\n\n            <Switch>\n                <Route exact path={'/Aide/'} component={Homepage} />\n                <Route path={'/Aide/charts'} component={ChartsPage} />\n                <Route path={'/Aide/reports'} component={Reports} />\n                <Route path={'/Aide/weather'} component={WeatherControlPage} />\n                <Route path=\"*\" component={Page404} />\n            </Switch>\n        </Flex>\n    )\n}\n\nexport default Navbar\n","import { createGlobalStyle } from 'styled-components'\nimport Navbar from './components/Navbar/Navbar'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    background: rgb(61, 45, 108);\n    color: aliceblue;\n    font-family: Sans-Serif;\n  }\n`\n\nfunction App() {\n    return (\n        <>\n            <GlobalStyle />\n            <Navbar />\n        </>\n    )\n}\n\nexport default App\n","import { combineReducers, configureStore } from '@reduxjs/toolkit'\nimport toolkitSlice from './toolkitSlice'\nimport saturationPeriodReportSlice from './saturationPeriodReportSlice'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n\nconst rootReducer = combineReducers({\n    toolkit: toolkitSlice,\n    saturationPeriodReport: saturationPeriodReportSlice,\n})\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = configureStore({\n    reducer: persistedReducer,\n})\n\nexport const persistor = persistStore(store)\n\nexport default { store, persistor }\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { persistor, store } from './toolKitRedux/store'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n    <Router>\n        <Provider store={store}>\n            <PersistGate persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </Router>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}