{"version":3,"sources":["components/Analytics/Slots.js","components/Analytics/OnionAnalytic.jsx","components/Analytics/Analytics.jsx","App.jsx","index.js"],"names":["slots","OnionAnalytic","props","city","saturation","map","saturationAtSlotData","id","difference","reason_saturation","area","level_saturation","Analytics","weekDataURL","newApiJSONLink","useState","startPeriodSlotSelected","setStartPeriodSlotSelected","endPeriodSlotSelected","setEndPeriodSlotSelected","saturationPeriodReport","setSaturationPeriodReport","sendRequestForReport","setSendRequestForReport","selectChangeHandler","e","name","target","value","getHighSaturatedOnions","url","a","axios","get","response","dataOfOnionsToday","data","console","error","filter","onion","Saturation","includes","split","join","getOnionSaturationInfo","onionName","slotStart","slotEnd","info","log","getSatReport","indexofStartSlotsPeriod","indexOf","indexofEndSlotsPeriod","todaySaturatedOnions","sturatedOnionsFilteredBySlotsPeriod","saturatedSlotOfOnion","Slot","indexOfSaturatedSlotStart","indexOfSaturatedSlotEnd","codesOfSaturatedOnionsAtSelectedPeriod","reduce","accum","some","obj","City","push","onionCode","index","uniqueCodesOfSaturatedOnions","Promise","all","slotStartHour","substr","slotEndHour","toLowerCase","onionSaturationReport","JSON","parse","reportArray","useEffect","action","onChange","slot","onClick","preventDefault","key","GlobalStyle","createGlobalStyle","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ba91c9a.chunk.js","sourcesContent":["export const slots = [\n    '00:00',\n    '00:30',\n    '01:00',\n    '01:30',\n    '02:00',\n    '02:30',\n    '03:00',\n    '03:30',\n    '04:00',\n    '04:30',\n    '05:00',\n    '05:30',\n    '06:00',\n    '06:30',\n    '07:00',\n    '07:30',\n    '08:00',\n    '08:30',\n    '09:00',\n    '09:30',\n    '10:00',\n    '10:30',\n    '11:00',\n    '11:30',\n    '12:00',\n    '12:30',\n    '13:00',\n    '13:30',\n    '14:00',\n    '14:30',\n    '15:00',\n    '15:30',\n    '16:00',\n    '16:30',\n    '17:00',\n    '17:30',\n    '18:00',\n    '18:30',\n    '19:00',\n    '19:30',\n    '20:00',\n    '20:30',\n    '21:00',\n    '21:30',\n    '22:00',\n    '22:30',\n    '23:00',\n    '23:30',\n]\n","import React from 'react';\n\nconst OnionAnalytic = (props) => {\n    return (\n        <div>\n            <h1>{props.city}</h1>\n            <div>{props.saturation.map((saturationAtSlotData, id) =>  <div key={id} >{saturationAtSlotData}</div>)}</div>\n            <div>{props.difference}</div>\n            <div>{props.reason_saturation}</div>\n            <div>\n\n                <span>{props.area}</span>\n                <span>{props.level_saturation}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default OnionAnalytic;","import axios from 'axios'\nimport React, {useEffect, useState} from 'react'\nimport {slots} from './Slots'\nimport OnionAnalytic from \"./OnionAnalytic\";\nimport {logDOM} from \"@testing-library/react\";\n\nexport default function Analytics() {\n    const stateReprort = [{\n        city: \"DNP\",\n        difference: \"D0 vs D7: курьеров -13%, заказов +35%. \",\n        reason_saturation: \"Причина сатурации - прирост заказов и уменьшилось количество активных курьеров в сравнении с прошлой неделей. \",\n        area: \"#A2\",\n        saturation: [\n            \"19:00 - 20:00: 174\",\n            \"20:00 - 21:00: 181\",\n            \"21:00 - 22:00: 161\",\n            \"22:00 - 22:30: 137\"\n        ],\n        level_saturation: \" #medium\"\n    }]\n\n    const todayDataURL = 'http://www.aideindustries.tk:5000/today'\n    const weekDataURL = 'http://www.aideindustries.tk:5000/week'\n    const averageURL = 'http://www.aideindustries.tk:5000/avrg/'\n    const jsonReportURL = 'http://www.aideindustries.tk:5000/analysis_json/'\n    const newApiJSONLink = 'http://www.aideindustries.tk:8000/search/'\n    const [startPeriodSlotSelected, setStartPeriodSlotSelected] = useState('00:00')\n    const [endPeriodSlotSelected, setEndPeriodSlotSelected] = useState('02:00')\n    const [saturationPeriodReport, setSaturationPeriodReport] = useState(stateReprort)\n    const [sendRequestForReport, setSendRequestForReport] = useState(false)\n\n    function selectChangeHandler(e) {\n        const name = e.target.name\n        if (name === 'slotStartPeriodSelector') {\n            setStartPeriodSlotSelected(e.target.value)\n        } else if (name === 'slotEndPeriodSelector') {\n            setEndPeriodSlotSelected(e.target.value)\n        }\n\n    }\n\n    async function getHighSaturatedOnions(url) {\n        let dataOfOnionsToday\n        try {\n            const response = await axios.get(url)\n            dataOfOnionsToday = response.data.data\n        } catch (error) {\n            console.error(error)\n        }\n\n        return await dataOfOnionsToday.filter(onion => {\n            const firstLevelSaturationTrashHold = 150\n\n            const onionSaturationValid =\n                onion.Saturation !== 0 && onion.Saturation.includes('%')\n            if (onionSaturationValid) {\n                const saturationNumber = +onion.Saturation.split('%').join('')\n                if (saturationNumber > firstLevelSaturationTrashHold) {\n                    return onion\n                }\n            }\n        })\n    }\n\n    async function getOnionSaturationInfo(onionName, slotStart, slotEnd) {\n        let info\n        try {\n            const response = await axios.get(`${newApiJSONLink}${onionName}/${slotStart}/${slotEnd}?an=yes`)\n            info = await response.data\n        } catch (error) {\n            console.log(error)\n        }\n        return info\n    }\n\n\n    async function getSatReport(slotStart, slotEnd) {\n        let indexofStartSlotsPeriod = slots.indexOf(slotStart)\n        let indexofEndSlotsPeriod = slots.indexOf(slotEnd) === 0 ? 10000 : slots.indexOf(slotEnd)\n\n        const todaySaturatedOnions = await getHighSaturatedOnions(weekDataURL)\n\n        const sturatedOnionsFilteredBySlotsPeriod = todaySaturatedOnions.filter(onion => {\n            const saturatedSlotOfOnion = onion.Slot.split(\" - \")\n            const indexOfSaturatedSlotStart = slots.indexOf(saturatedSlotOfOnion[0])\n            const indexOfSaturatedSlotEnd = slots.indexOf(saturatedSlotOfOnion[1]) === 0 ? 1000 : slots.indexOf(saturatedSlotOfOnion[1])\n            const saturatedSlotIsAtSelectedPeriod = indexofStartSlotsPeriod <= indexOfSaturatedSlotStart && indexofEndSlotsPeriod >= indexOfSaturatedSlotEnd\n\n            if (saturatedSlotIsAtSelectedPeriod) {\n                return onion\n            }\n        })\n\n        const codesOfSaturatedOnionsAtSelectedPeriod = sturatedOnionsFilteredBySlotsPeriod.reduce((accum, onion) => {\n            if (!accum.some(obj => obj.City === onion.City)) {\n                accum.push(onion.City)\n            }\n            return accum\n        }, [])\n\n        const uniqueCodesOfSaturatedOnions = await codesOfSaturatedOnionsAtSelectedPeriod.filter((onionCode, index) => codesOfSaturatedOnionsAtSelectedPeriod.indexOf(onionCode) === index)\n        console.log(uniqueCodesOfSaturatedOnions)\n\n\n        const reportArray = await Promise.all( uniqueCodesOfSaturatedOnions.map(async name => {\n            const slotStartHour = slotStart.substr(0, 2)\n            const slotEndHour = slotEnd.substr(0, 2)\n            const onionCode = name.toLowerCase()\n            const report = []\n            const onionSaturationReport = await getOnionSaturationInfo(onionCode, slotStartHour, slotEndHour)\n            // console.log(JSON.parse(await onionSaturationReport))\n            return JSON.parse(await onionSaturationReport)\n        }, []))\n\n        console.log(reportArray)\n\n        return reportArray\n    }\n\n    useEffect(async () => {\n            setSaturationPeriodReport(await getSatReport(startPeriodSlotSelected, endPeriodSlotSelected))\n        }, [sendRequestForReport]\n    )\n\n    return (\n        <div>\n            <form action=\"#\">\n                <select name=\"slotStartPeriodSelector\" id=\"1\" value={startPeriodSlotSelected}\n                        onChange={(e) => selectChangeHandler(e)}>\n                    {slots.map((slot, id) => (\n                        <option value={slot} key={id}>\n                            {slot}\n                        </option>\n                    ))}\n                </select>\n                <select name=\"slotEndPeriodSelector\" id=\"2\" value={endPeriodSlotSelected}\n                        onChange={(e) => selectChangeHandler(e)}>\n                    {slots.map((slot, id) => (\n                        <option value={slot} key={id}>\n                            {slot}\n                        </option>\n                    ))}\n                </select>\n                <button\n                    onClick={e => {\n                        getSatReport(startPeriodSlotSelected, endPeriodSlotSelected)\n                        e.preventDefault()\n                        setSendRequestForReport(true)\n                    }}\n                >\n                    Get report\n                </button>\n            </form>\n\n            {startPeriodSlotSelected}\n            {endPeriodSlotSelected}\n\n            <div>{saturationPeriodReport.map((onion, id) => <OnionAnalytic {...onion} key={id}/>)}</div>\n\n        </div>\n    )\n}\n","import Analytics from './components/Analytics/Analytics.jsx'\n\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    background: black;\n\t  color: aliceblue;\n    font-family: Open-Sans, Helvetica, Sans-Serif;\n  }\n`;\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<GlobalStyle/>\n\t\t\t<Analytics />\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}